<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE root [<!ELEMENT messageBoard ANY>
<!ATTLIST messageBoard id ID #REQUIRED>
<!ELEMENT members ANY>
<!ATTLIST members id ID #REQUIRED>
<!ELEMENT contactPage ANY>
<!ATTLIST contactPage id ID #REQUIRED>
<!ELEMENT home ANY>
<!ATTLIST home id ID #REQUIRED>
<!ELEMENT projectsItem ANY>
<!ATTLIST projectsItem id ID #REQUIRED>
<!ELEMENT projectsMain ANY>
<!ATTLIST projectsMain id ID #REQUIRED>
<!ELEMENT textPage ANY>
<!ATTLIST textPage id ID #REQUIRED>
<!ELEMENT articlesItem ANY>
<!ATTLIST articlesItem id ID #REQUIRED>
<!ELEMENT articlesMain ANY>
<!ATTLIST articlesMain id ID #REQUIRED>
<!ELEMENT master ANY>
<!ATTLIST master id ID #REQUIRED>
]>
<root id="-1">
  <home id="1088" key="a0cf8063-2b46-463f-ba41-9f4e90de1687" parentID="-1" level="1" creatorID="0" sortOrder="0" createDate="2016-09-19T14:50:10" updateDate="2016-10-13T11:33:43" nodeName="Home" urlName="home" path="-1,1088" isDoc="" nodeType="1057" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1056" nodeTypeAlias="home">
    <umbracoNaviHide>0</umbracoNaviHide>
    <siteTitle><![CDATA[Aarhus Web Dev]]></siteTitle>
    <mainContent><![CDATA[<p><span>This is a blog with notes from </span><span>Aarhus </span></p>
<p><span>Web </span><span>Developers Network.</span></p>]]></mainContent>
    <footerText><![CDATA[Copyright 2016 - Aarhus Web Dev]]></footerText>
    <grid><![CDATA[{
  "name": "1 column layout",
  "sections": [
    {
      "grid": 12,
      "rows": []
    }
  ]
}]]></grid>
    <contactPage id="1101" key="350b4149-67e5-424e-815f-96f21cd58018" parentID="1088" level="2" creatorID="0" sortOrder="2" createDate="2016-09-20T10:11:36" updateDate="2016-10-13T15:26:41" nodeName="Contact Us" urlName="contact-us" path="-1,1088,1101" isDoc="" nodeType="1100" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1099" nodeTypeAlias="contactPage">
      <metaDescription><![CDATA[Get in contact with us.]]></metaDescription>
      <metaKeywords><![CDATA[contact]]></metaKeywords>
      <umbracoNaviHide>0</umbracoNaviHide>
    </contactPage>
    <textPage id="1112" key="239e0c07-8435-4c5f-af36-a2bd840bc106" parentID="1088" level="2" creatorID="0" sortOrder="3" createDate="2016-09-26T11:27:17" updateDate="2016-10-13T15:27:12" nodeName="Login" urlName="login" path="-1,1088,1112" isDoc="" nodeType="1059" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1111" nodeTypeAlias="textPage">
      <metaDescription><![CDATA[Login at Aarhus Web Dev.]]></metaDescription>
      <metaKeywords><![CDATA[login]]></metaKeywords>
      <umbracoNaviHide>1</umbracoNaviHide>
      <grid><![CDATA[{
  "name": "1 column layout",
  "sections": [
    {
      "grid": 12,
      "rows": []
    }
  ]
}]]></grid>
    </textPage>
    <textPage id="1113" key="05fc7236-2ceb-4a26-8ef4-a9129328fdad" parentID="1088" level="2" creatorID="0" sortOrder="4" createDate="2016-09-26T11:32:20" updateDate="2016-10-13T15:28:04" nodeName="Forbidden Access" urlName="forbidden-access" path="-1,1088,1113" isDoc="" nodeType="1059" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1058" nodeTypeAlias="textPage">
      <metaDescription><![CDATA[Forbidden Access.]]></metaDescription>
      <metaKeywords><![CDATA[access]]></metaKeywords>
      <umbracoNaviHide>1</umbracoNaviHide>
      <grid><![CDATA[{
  "name": "1 column layout",
  "sections": [
    {
      "grid": 12,
      "rows": [
        {
          "name": "Headline",
          "areas": [
            {
              "grid": 12,
              "allowAll": false,
              "allowed": [
                "headline"
              ],
              "hasConfig": false,
              "controls": [
                {
                  "value": "Forbidden Access",
                  "editor": {
                    "alias": "headline"
                  },
                  "active": false
                }
              ]
            }
          ],
          "hasConfig": false,
          "id": "db8ee20e-f2cb-0ce3-8865-cd5903ec5c89"
        },
        {
          "name": "Main Content",
          "areas": [
            {
              "grid": 12,
              "allowAll": false,
              "allowed": [
                "rte"
              ],
              "hasConfig": false,
              "controls": [
                {
                  "value": "<p>You must log in to access this page.</p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ],
              "active": false
            }
          ],
          "hasConfig": false,
          "id": "8a6e3eaa-807a-5899-018a-6631cff5d8fc",
          "active": false
        }
      ]
    }
  ]
}]]></grid>
    </textPage>
    <members id="1117" key="d65cac58-8c90-45f5-a8fb-594c0300dd1d" parentID="1088" level="2" creatorID="0" sortOrder="5" createDate="2016-10-03T17:06:13" updateDate="2016-10-13T15:28:21" nodeName="Members" urlName="members" path="-1,1088,1117" isDoc="" nodeType="1116" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1115" nodeTypeAlias="members">
      <metaDescription><![CDATA[List of members.]]></metaDescription>
      <metaKeywords><![CDATA[member]]></metaKeywords>
      <umbracoNaviHide>0</umbracoNaviHide>
    </members>
    <messageBoard id="1120" key="d8416cdd-6b40-43b0-8ebe-1432fabcce18" parentID="1088" level="2" creatorID="0" sortOrder="6" createDate="2016-10-12T14:51:37" updateDate="2016-10-12T14:51:37" nodeName="Message Board" urlName="message-board" path="-1,1088,1120" isDoc="" nodeType="1119" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1118" nodeTypeAlias="messageBoard">
      <messageBoard id="1158" key="f39315ad-2092-48d4-8f97-19c620e844fa" parentID="1120" level="3" creatorID="0" sortOrder="0" createDate="2016-10-13T14:49:23" updateDate="2016-10-13T14:49:23" nodeName="Raphaël Dumont" urlName="raphaël-dumont" path="-1,1088,1120,1158" isDoc="" nodeType="1119" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1118" nodeTypeAlias="messageBoard">
        <msgbName><![CDATA[Raphaël Dumont]]></msgbName>
        <msgbMessage><![CDATA[Hi there. Love the page you guys have made here. Can I order one?]]></msgbMessage>
      </messageBoard>
      <messageBoard id="1159" key="aadd2e34-8df1-44ea-8298-7101c98c34de" parentID="1120" level="3" creatorID="0" sortOrder="1" createDate="2016-10-13T14:49:50" updateDate="2016-10-13T14:49:50" nodeName="Raphaël Dumont (1)" urlName="raphaël-dumont-1" path="-1,1088,1120,1159" isDoc="" nodeType="1119" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1118" nodeTypeAlias="messageBoard">
        <msgbName><![CDATA[Raphaël Dumont]]></msgbName>
        <msgbMessage><![CDATA[You have not answered my message? How do I get in contact with you? Tinder?]]></msgbMessage>
      </messageBoard>
      <messageBoard id="1160" key="6a2bd0f3-705b-4a97-b723-b92e1fa9bc4a" parentID="1120" level="3" creatorID="0" sortOrder="2" createDate="2016-10-13T14:50:39" updateDate="2016-10-13T14:50:39" nodeName="Lise Hansen" urlName="lise-hansen" path="-1,1088,1120,1160" isDoc="" nodeType="1119" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1118" nodeTypeAlias="messageBoard">
        <msgbName><![CDATA[Lise Hansen]]></msgbName>
        <msgbMessage><![CDATA[Hi guys. Your notes helps me a lot learning how to develop websites. Thank you so much!]]></msgbMessage>
      </messageBoard>
      <messageBoard id="1161" key="c2f198b2-7590-4a78-bb39-87f11275f075" parentID="1120" level="3" creatorID="0" sortOrder="3" createDate="2016-10-13T14:51:10" updateDate="2016-10-13T14:51:10" nodeName="Albert Larsen" urlName="albert-larsen" path="-1,1088,1120,1161" isDoc="" nodeType="1119" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1118" nodeTypeAlias="messageBoard">
        <msgbName><![CDATA[Albert Larsen]]></msgbName>
        <msgbMessage><![CDATA[Hi. My name is Albert and I want to work for you. I can clean databases and search on Google.]]></msgbMessage>
      </messageBoard>
      <messageBoard id="1162" key="eedd5851-a83f-4404-8131-0d9cb111caf6" parentID="1120" level="3" creatorID="0" sortOrder="4" createDate="2016-10-13T14:51:47" updateDate="2016-10-13T14:51:47" nodeName="Raphaël Dumont (2)" urlName="raphaël-dumont-2" path="-1,1088,1120,1162" isDoc="" nodeType="1119" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1118" nodeTypeAlias="messageBoard">
        <msgbName><![CDATA[Raphaël Dumont]]></msgbName>
        <msgbMessage><![CDATA[You’re the best. Thanks for great notes!]]></msgbMessage>
      </messageBoard>
    </messageBoard>
    <projectsMain id="1136" key="1a121e6c-f2a3-41a9-9db9-9366ec7c2aca" parentID="1088" level="2" creatorID="0" sortOrder="7" createDate="2016-10-13T11:00:11" updateDate="2016-10-13T15:28:42" nodeName="Projects" urlName="projects" path="-1,1088,1136" isDoc="" nodeType="1071" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1070" nodeTypeAlias="projectsMain">
      <metaDescription><![CDATA[List of projects.]]></metaDescription>
      <metaKeywords><![CDATA[projects]]></metaKeywords>
      <umbracoNaviHide>0</umbracoNaviHide>
      <projectsBodyText><![CDATA[<p>This is a list of danish projects.</p>]]></projectsBodyText>
      <projectsTitle><![CDATA[Projects]]></projectsTitle>
      <projectsItem id="1150" key="b67ec068-916a-4bde-9b7e-48678424ac93" parentID="1136" level="3" creatorID="0" sortOrder="0" createDate="2016-10-13T11:11:45" updateDate="2016-10-13T11:25:43" nodeName="Semantic HTML" urlName="semantic-html" path="-1,1088,1136,1150" isDoc="" nodeType="1075" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <metaDescription><![CDATA[Semantic er forståelse af betydningen af ord og sætninger i sprog. Semantic elementer er elementer med betydning.]]></metaDescription>
        <metaKeywords><![CDATA[semantic, element]]></metaKeywords>
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p><span style="font-weight: 400;">Semantic er forståelse af betydningen af ord og sætninger i sprog. Semantic elementer er elementer med betydning.</span></p>
<p><span style="font-weight: 400;">Der er to forskellige slags semantic elementer:</span></p>
<p> </p>
<p><span style="font-weight: 400;">Non-semantic element: &lt;div&gt; og &lt;span&gt;</span></p>
<p><span style="font-weight: 400;">- De forklarer intet om indholdet</span></p>
<p><span style="font-weight: 400;">Semantic element: &lt;form&gt;, &lt;table&gt;, &lt;img&gt; osv.</span></p>
<p><span style="font-weight: 400;">- De forklarer tydeligt, hvad indholdet er</span></p>
<p> </p>
<p><span style="font-weight: 400;">HTML5 inkluderer nye semantiske elementer, som beskriver forskellige dele af en side på en hjemmeside.</span></p>
<p> </p>
<p><span style="font-weight: 400;">I HTML4 brugte udviklere deres egen attributter til at style elementer, hvilket kunne være &lt;content&gt;, &lt;sidebar&gt;, &lt;topnav&gt; osv. Dette gjorde det umuligt for søgemaskiner at identificere det korrekte indhold på hjemmesiden. Med HTML5, blev det mere struktureret og lettere for søgemaskinerne.</span></p>
<p> </p>
<p><span style="font-weight: 400;">Fordelen ved Semantic elementer er, at HTML er markup language, hvilket består i at navngive elementer effektivt, og det burde være muligt at læse en HTML side og hurtigt få et overblik over, hvad de forskellige elementer indeholder. Derudover  så virker elementer forskelligt på diverse enheder. For eksempel ved en form med et indtast felt, med typen “tel”, så kommer der et tastatur med tal i stedet for bugstaver, hvis enheden er en telefon. Til sidst, så er der også SEO optimering og hvor hurtigt siden bliver læst af browseren.</span></p>
<p><span style="font-weight: 400;">HTML outline</span></p>
<p> </p>
<p><span style="font-weight: 400;">En HTML outline er en forklaring af strukturen på en hjemmeside. Dette var et problem med HTML4, da der kun blev brugt div’er, og det var usikkert om div’en var brugt til at style eller strutkur. Dette blev meget bedre med HTML5, hvor semantic elementer kom i spil.</span></p>
<p><span style="font-weight: 400;">Section elementer</span></p>
<p> </p>
<p><span style="font-weight: 400;">Det er elementer, som er logiske at bruge for at opdele indhold. Man opdele en side på følgende måde:</span></p>
<p><span style="font-weight: 400;">&lt;header&gt;&lt;nav&gt;&lt;/nav&gt;&lt;/header&gt;</span></p>
<p><span style="font-weight: 400;">&lt;aside&gt;&lt;/aside&gt;&lt;main&gt;&lt;/main&gt;</span></p>
<p><span style="font-weight: 400;">headings</span></p>
<p> </p>
<p><span style="font-weight: 400;">Headings elementer (h1-h6) er ikke lavet for at gøre tekst fed eller for at have en stor skrifttørrelse. Søgemaskiner bruger headings til at index strukturen og indholdet af siderne på en hjemmeside. Det giver mening at starte med en h1, og så slutte med en h6.</span></p>
<p><span style="font-weight: 400;">&lt;head&gt; har ikkke noget med headings at gøre. Den indeholder meta data, og de er ikke vist på en hjemmeside.</span></p>]]></projectContent>
        <projectTitle><![CDATA[Semantic HTML]]></projectTitle>
        <image><![CDATA[1145]]></image>
      </projectsItem>
      <projectsItem id="1151" key="d6a1f2c4-83a6-4274-bf08-6ad77aeaae95" parentID="1136" level="3" creatorID="0" sortOrder="1" createDate="2016-10-13T11:13:24" updateDate="2016-10-13T11:25:38" nodeName="Classes &amp; Objects, Inheritance" urlName="classes-objects-inheritance" path="-1,1088,1136,1151" isDoc="" nodeType="1075" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <metaDescription><![CDATA[MVC står for Model, View og Controller, som bruges til at adskille opgaver fra hinanden.]]></metaDescription>
        <metaKeywords><![CDATA[Model, View, Controller]]></metaKeywords>
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>MVC</p>
<p><span style="font-weight: 400;">MVC står for Model, View og Controller, som bruges til at adskille opgaver fra hinanden.</span></p>
<p><span style="font-weight: 400;">Model er et sæt af klasser, som beskriver vores datastruktur og Methods til at tilgå vores data. View delen definerer hvordan vores applikations UI vil blive vist – altså View indeholder det som klienten skal kunne se (HTML, CSS, JavaScript osv.). Controlleren håndterer forholdet mellem View og Model. Den reagerer på user input, forbinder til Model (i så fald der er en) og beslutter hvilket View der skal returneres. Ift. Php-framework hvor URL har en direkte forbindelse til en specifik fil på serveren, har url’en i MVC forbindelse til en controller.</span></p>
<p><span style="font-weight: 400;">Man bruger ASP.NET MVC fordi man ønsker fuld kontrol over HTML og generelt kode, som struktureres på en god måde og følger DRY-princippet.</span></p>
<p><span style="font-weight: 400;">Desuden stiller MVC frameworket HTML Helper Methods til rådighed.</span></p>
<p> </p>
<p>C#</p>
<p><span style="font-weight: 400;">C# er et (strongly typed = alle variabeler skal defineres med en type) og objektorienteret programmeringssprog, som betyder at programkoden opdeles i klasser, som hver har sit ansvarsområde. Det er case-sensitiv hvilket vil sige at det differentierer mellem små- og store bogstaver. Det er udviklet af Microsoft og gennem .NET.</span></p>
<p> </p>
<p>Class</p>
<p><span style="font-weight: 400;">Class repræsenterer en mængde af objects med fælles karakteristika. Objects kaldes for instanser af klassen. Beskriver den struktur af tilstande og adfærd, der er fælles for alle klassens instanser.</span></p>
<p><span style="font-weight: 400;">En class er en container som kan indeholde ting.</span></p>
<p> </p>
<p><span style="font-weight: 400;">Vores eksempel med Eksamen projekt:</span></p>
<p><span style="font-weight: 400;">I model (user): Har har vi en række skabeloner til fremtidige instanser. Altså før vi laver en masse brugere, bestemmer vi hvad en user skal indeholde (id, navn, email, password – som er properties). En constructor bruges til at lave en instans af en class, som er et object – bruges til at fylde data ind i et object (eks. new student med data). Der er automatisk en tom constructor hvis man ikke selv laver en.</span></p>
<p><span style="font-weight: 400;">I controller (RegisterController): En controller er også en class, som nedarver fra en controller. En controller består af en Action Method, som er den Method Url’en peger hen på og skal derfor returnere et View. Vis i RouteConfiq med url: controller/action/id. Action Method er som default GET.</span></p>
<p> </p>
<p>Object</p>
<p><span style="font-weight: 400;">Et object er en instans af en class.</span></p>
<p> </p>
<p><span style="font-weight: 400;">Vores eksempel med Eksamen projekt:</span></p>
<p><span style="font-weight: 400;">I repository: Som er en class hvor vi laver alle objects – altså en form for database. Laver ny instans af student class – altså vi laver et object. Student er complex data type og skal derfor instansieres (new). Simple data types er f.eks. string og int. Variabel s1 indeholder nu et helt object. Vi kan se alle Methods, som er nedarvet fra data typen List ved at skrive “Teacher.”</span></p>
<p>Inheritance</p>
<p><span style="font-weight: 400;">Er når vi opretter en ny class som genbruger elementer som er dedffineret i en anden class. Formålet er at undgå at gentage kode (DRY). Den class som der nedarves fra, kaldes for base class. Den class som nedarver fra en anden class er en derived class som kaldes for subclass.</span></p>
<p> </p>
<p><span style="font-weight: 400;">Vores eksempel med Eksamen projekt:</span></p>
<p><span style="font-weight: 400;">I User. void = returnerer ikke noget. Vi alle parametrene som kommer fra user. Student nedarver fra User og får det hele med, også Methods – kan ses i student.AddCourse i repository.</span></p>]]></projectContent>
        <projectTitle><![CDATA[Classes & Objects, Inheritance]]></projectTitle>
        <image><![CDATA[1137]]></image>
      </projectsItem>
      <projectsItem id="1152" key="51c0c553-5713-4665-afa0-9e6790f8e053" parentID="1136" level="3" creatorID="0" sortOrder="2" createDate="2016-10-13T11:15:53" updateDate="2016-10-13T11:15:53" nodeName="MVC" urlName="mvc" path="-1,1088,1136,1152" isDoc="" nodeType="1075" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <metaDescription><![CDATA[Model er et sæt af klasser, som beskriver vores datastruktur og Methods til at tilgå vores data.]]></metaDescription>
        <metaKeywords><![CDATA[Model, View, Controller]]></metaKeywords>
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Underdevelopment]]></status>
        <projectContent><![CDATA[<p><span style="font-weight: 400;">MVC står for Model, View og Controller, som bruges til at adskille opgaver fra hinanden.</span></p>
<p><span style="font-weight: 400;">Model er et sæt af klasser, som beskriver vores datastruktur og Methods til at tilgå vores data. View delen definerer hvordan vores applikations UI vil blive vist – altså View indeholder det som klienten skal kunne se (HTML, CSS, JavaScript osv.). Controlleren håndterer forholdet mellem View og Model. Den reagerer på user input, forbinder til Model (i så fald der er en) og beslutter hvilket View der skal returneres. Ift. Php-framework hvor URL har en direkte forbindelse til en specifik fil på serveren, har url’en i MVC forbindelse til en controller.</span></p>
<p><span style="font-weight: 400;">Man bruger ASP.NET MVC fordi man ønsker fuld kontrol over HTML og generelt kode, som struktureres på en god måde og følger DRY-princippet.</span></p>
<p><span style="font-weight: 400;">Desuden stiller MVC frameworket HTML Helper Methods til rådighed.</span></p>
<p> </p>
<p>Razor engine</p>
<p><span style="font-weight: 400;">Er en markup syntax, som giver os mulighed for at skrive C# i vores HTML vha. “@“. Det betyder at I vores view, kan vi skrive template kode, som vores ASP.NET så kan konvertere om til f.eks. HTML kode, eller C# kode.</span></p>]]></projectContent>
        <projectTitle><![CDATA[MVC]]></projectTitle>
        <image><![CDATA[1143]]></image>
      </projectsItem>
      <projectsItem id="1153" key="500a861e-fe72-4ce8-877c-93b7731a2c61" parentID="1136" level="3" creatorID="0" sortOrder="3" createDate="2016-10-13T11:17:56" updateDate="2016-10-13T11:25:31" nodeName="Model Binding, Controllers and strongly typed views" urlName="model-binding-controllers-and-strongly-typed-views" path="-1,1088,1136,1153" isDoc="" nodeType="1075" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <metaDescription><![CDATA[Man bruger ASP.NET MVC fordi man ønsker fuld kontrol over HTML og generelt kode, som struktureres på en god måde og følger DRY-princippet.]]></metaDescription>
        <metaKeywords><![CDATA[ASP.NET, MVC]]></metaKeywords>
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>MVC</p>
<p><span style="font-weight: 400;">MVC står for Model, View og Controller, som bruges til at adskille opgaver fra hinanden.</span></p>
<p><span style="font-weight: 400;">Model er et sæt af klasser, som beskriver vores datastruktur og Methods til at tilgå vores data. View delen definerer hvordan vores applikations UI vil blive vist – altså View indeholder det som klienten skal kunne se (HTML, CSS, JavaScript osv.). Controlleren håndterer forholdet mellem View og Model. Den reagerer på user input, forbinder til Model (i så fald der er en) og beslutter hvilket View der skal returneres. Ift. Php-framework hvor URL har en direkte forbindelse til en specifik fil på serveren, har url’en i MVC forbindelse til en controller.</span></p>
<p><span style="font-weight: 400;">Man bruger ASP.NET MVC fordi man ønsker fuld kontrol over HTML og generelt kode, som struktureres på en god måde og følger DRY-princippet.</span></p>
<p><span style="font-weight: 400;">Desuden stiller MVC frameworket HTML Helper Methods til rådighed.</span></p>
<p> </p>
<p>Model binding</p>
<p><span style="font-weight: 400;">Model binding er hvor vi binder en model op på et view.</span></p>
<p> </p>
<p><span style="font-weight: 400;">Eksempel med projekt Eksamen:</span></p>
<p><span style="font-weight: 400;">Register – Index: En form for model binding, hvor vi tilgår student-modellen for ar kende til dens properties. Her laver vi input-felter som passer til disse properties – viser data notations fra user modellen og hvordan de opfører sig i browser. Tilgår en model for at kende til properties og bygge input felter op omkring det – både for at få typer, intellisense og datanotations.</span></p>
<p><span style="font-weight: 400;">AdminStudentsController: Her sender vi en liste af objekter med data gennem et view (strongly typed). I AdminStudent-view angiver vi listen i toppen med model binding, som er en anden måde at tilgå det på. Med det her kan vi få data med og hermed udskrive alt data. I eksemplet ovenover er der ikke data med, da objektet ikke returneres i viewet. Vis hvordan vi kan loope gennem listen og printe hver student ud på siden.</span></p>
<p><span style="font-weight: 400;">I forhold til controllers viser vi hvordan man sender et object gennem en controller.</span></p>
<p> </p>
<p><span style="font-weight: 400;">Strongly typed view vs. dynamic view</span></p>
<p><span style="font-weight: 400;">Strongly typed view specificerer data typen og er mere konkret med hvad for noget data der skal benyttes. Det giver fordele ift. at det er med Intellisense og compile time error checking.</span></p>
<p> </p>
<p><span style="font-weight: 400;">ViewBag</span></p>
<p><span style="font-weight: 400;">Her kan man sende noget data med i en ViewBag. Det kan ikke være strongly typed view, så der er ingen Intellisense.</span></p>
<p><span style="font-weight: 400;">Skrives som: ViewBag.nameontheviewbag = “noget tekst”;</span></p>
<p><span style="font-weight: 400;">Kaldes med: @ViewBag.nameontheviewbag</span></p>
<p><span style="font-weight: 400;">Bruges det med title, da den er uafhængig af alt andet. Den bruges i shared, hvor den puttes op i titlen på den pågældende side man er inde på.</span></p>]]></projectContent>
        <projectTitle><![CDATA[Model Binding, Controllers and strongly typed views]]></projectTitle>
        <image><![CDATA[1142]]></image>
      </projectsItem>
    </projectsMain>
    <articlesMain id="1146" key="4ce75404-0c7f-4152-a714-35b8df88d10d" parentID="1088" level="2" creatorID="0" sortOrder="8" createDate="2016-10-13T11:04:40" updateDate="2016-10-13T15:29:01" nodeName="Articles" urlName="articles" path="-1,1088,1146" isDoc="" nodeType="1062" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1061" nodeTypeAlias="articlesMain">
      <metaDescription><![CDATA[List of articles.]]></metaDescription>
      <metaKeywords><![CDATA[articles]]></metaKeywords>
      <umbracoNaviHide>0</umbracoNaviHide>
      <articlesTitle><![CDATA[Articles]]></articlesTitle>
      <articlesItem id="1147" key="6f4aab22-8db8-4d56-959a-7bdaf117b553" parentID="1146" level="3" creatorID="0" sortOrder="0" createDate="2016-10-13T11:06:47" updateDate="2016-10-13T15:29:25" nodeName="ACID (Transactions)" urlName="acid-transactions" path="-1,1088,1146,1147" isDoc="" nodeType="1065" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1064" nodeTypeAlias="articlesItem">
        <metaDescription><![CDATA[ACID is short for Atomicity, Consistency, Isolation, Durability.]]></metaDescription>
        <metaKeywords><![CDATA[ACID]]></metaKeywords>
        <umbracoNaviHide>0</umbracoNaviHide>
        <articleContent><![CDATA[<p><span style="font-weight: 400;">ACID is short for Atomicity, Consistency, Isolation, Durability and is a number of conditions that ensure that a database transaction will be executed reliably.</span></p>
<p><span style="font-weight: 400;">These four properties are defined as following:</span></p>
<p><span style="font-weight: 400;">Atomicity (A): It should not be possible to execute a transaction partially, it is “all or nothing”. If a part of a transaction fails, it will abort the transaction completely and nothing in the database will be changed. In this way, inconsistencies in the database due to half-executed transactions will be avoided.</span></p>
<p><span style="font-weight: 400;">Consistency (C): A transaction should always bring the database from one valid state to another. It should not be possible to bring the database into a state with e.g. references to non-existing foreign keys or similar.</span></p>
<p><span style="font-weight: 400;">Isolation (I): A transaction is executed serialized and isolated, i.e. that the states in a non-completed transaction will never be visible, and only one transaction is run at a time.</span></p>
<p><span style="font-weight: 400;">Durability (D): A completed transaction, and the results hereof, are permanent and cannot be reverted.</span></p>
<p><span style="font-weight: 400;">SQL is an ACID compliant language – NoSQL (and MongoDB) is not, since NoSQL databases are not relational and does not support transactions.</span></p>]]></articleContent>
        <articleTitle><![CDATA[ACID (Transactions)]]></articleTitle>
      </articlesItem>
      <articlesItem id="1148" key="187cfb56-988e-4de7-babd-77a45204e65f" parentID="1146" level="3" creatorID="0" sortOrder="1" createDate="2016-10-13T11:08:07" updateDate="2016-10-13T15:29:41" nodeName="Sharding" urlName="sharding" path="-1,1088,1146,1148" isDoc="" nodeType="1065" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1064" nodeTypeAlias="articlesItem">
        <metaDescription><![CDATA[Sharding is a horizontal partition of data in a database.]]></metaDescription>
        <metaKeywords><![CDATA[sharding]]></metaKeywords>
        <umbracoNaviHide>0</umbracoNaviHide>
        <articleContent><![CDATA[<p><span style="font-weight: 400;">Sharding is a horizontal partition of data in a database.</span></p>
<p><span style="font-weight: 400;">Sharding is a design principle where rows of a database table are held separately. The data can be placed on separate hardware. It is an advantage because the total number of rows in each table in each database is reduced. This gives a reduction in storage and will improve the performance. Some of the disadvantages are a heavier reliance on the interconnect between servers. There are also an increased delay when querying because of the partition. Consistency and durability are also issues due to the more complex failure modes of a set of servers.</span></p>]]></articleContent>
        <articleTitle><![CDATA[Sharding]]></articleTitle>
      </articlesItem>
      <articlesItem id="1149" key="3ef8a2b3-f8d1-46fa-8e8a-d0acfac0ada4" parentID="1146" level="3" creatorID="0" sortOrder="2" createDate="2016-10-13T11:09:51" updateDate="2016-10-13T15:29:53" nodeName="SQL basics" urlName="sql-basics" path="-1,1088,1146,1149" isDoc="" nodeType="1065" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1064" nodeTypeAlias="articlesItem">
        <metaDescription><![CDATA[SEQUEL or SQL (StructuredQuery Language)]]></metaDescription>
        <metaKeywords><![CDATA[sql]]></metaKeywords>
        <umbracoNaviHide>0</umbracoNaviHide>
        <articleContent><![CDATA[<p><span style="font-weight: 400;">SEQUEL or SQL (StructuredQuery Language)</span></p>
<p><span style="font-weight: 400;">Most common language in relational databases.</span></p>
<p><span style="font-weight: 400;">Declarative programming language – resembles English and is very logical.</span></p>
<p><span style="font-weight: 400;">Transform-oriented language – a language designed to use relations to transform inputs into required outputs.</span></p>
<p><span style="font-weight: 400;">Nonprocedural language – you specify what information you require, rather than how to get it.</span></p>
<p><span style="font-weight: 400;">Basic queries consist of:</span></p>
<p><span style="font-weight: 400;">CREATE: Is used to create a table with “CREATE TABLE”.</span></p>
<p><span style="font-weight: 400;">ALTER: Is used to add, delete, or modify columns in an existing table.</span></p>
<p><span style="font-weight: 400;">DROP: Is used to remove a table definition and all data, indexes, triggers, constraints, and permission specifications for that table.</span></p>
<p><span style="font-weight: 400;">SELECT: Is used to to extract data from a database.</span></p>
<p><span style="font-weight: 400;">WHERE: Is used to extract only those records that fulfill a specified criterion.</span></p>
<p><span style="font-weight: 400;">ORDER BY: Is used to sort the result set.</span></p>
<p><span style="font-weight: 400;">INSERT: Is used to insert new data into a database.</span></p>
<p><span style="font-weight: 400;">UPDATE: Is used to update data in a database.</span></p>
<p><span style="font-weight: 400;">DELETE: Is used to delete data from a database.</span></p>
<p><span style="font-weight: 400;">NOT NULL: Enforces a column to not accept null values.</span></p>
<p><span style="font-weight: 400;">LIKE: Is used to search for a specified pattern in a column.</span></p>
<p><span style="font-weight: 400;">T-SQL. The “T” stands for “transact”. It is because SQL Server supports transactions. Transactions is important in every critical system where we can’t accept that a request isn’t fully completed and therefore might make errors in the database.</span></p>
<p><span style="font-weight: 400;">SQL is an ACID compliant language which is conditions that ensures that a database transaction will be executed reliably.</span></p>
<p><span style="font-weight: 400;">SQL use joins to combine rows from two or more tables, based on a common field between them. The most common type of join is: SQL Inner Join that returns all rows from multiple tables where the join condition is met.</span></p>]]></articleContent>
        <articleTitle><![CDATA[SQL basics]]></articleTitle>
      </articlesItem>
    </articlesMain>
    <textPage id="1154" key="b7e41e8a-4b23-4969-8411-f349c17315b7" parentID="1088" level="2" creatorID="0" sortOrder="9" createDate="2016-10-13T11:35:11" updateDate="2016-10-13T15:30:33" nodeName="About" urlName="about" path="-1,1088,1154" isDoc="" nodeType="1059" creatorName="Steffen Pedersen" writerName="Steffen Pedersen" writerID="0" template="1058" nodeTypeAlias="textPage">
      <metaDescription><![CDATA[We want a future without awful websites.]]></metaDescription>
      <metaKeywords><![CDATA[about]]></metaKeywords>
      <umbracoNaviHide>0</umbracoNaviHide>
      <grid><![CDATA[{
  "name": "1 column layout",
  "sections": [
    {
      "grid": 12,
      "rows": [
        {
          "name": "Headline",
          "areas": [
            {
              "grid": 12,
              "allowAll": false,
              "allowed": [
                "headline"
              ],
              "hasConfig": false,
              "controls": [
                {
                  "value": "About",
                  "editor": {
                    "alias": "headline"
                  },
                  "active": false
                }
              ]
            }
          ],
          "hasConfig": false,
          "id": "a318bb97-9b4a-2b6f-15f7-173adcb64097"
        },
        {
          "name": "Main Content",
          "areas": [
            {
              "grid": 12,
              "allowAll": false,
              "allowed": [
                "rte"
              ],
              "hasConfig": false,
              "controls": [
                {
                  "value": "<p>We want a future without awful websites.</p>\n<p>Together we are stronger!</p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ]
            }
          ],
          "hasConfig": false,
          "id": "d4837dfa-a425-7ba8-b6fa-77a5518fea5d"
        },
        {
          "name": "Additional",
          "areas": [
            {
              "grid": 4,
              "hasConfig": false,
              "controls": [
                {
                  "value": "<h3>Vision</h3>\n<p><span style=\"font-weight: 400;\">The vision at weblog is to be a helpful guide in developing user-friendly websites. We want a future without awful websites!</span></p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ]
            },
            {
              "grid": 4,
              "hasConfig": false,
              "controls": [
                {
                  "value": "<h3>People</h3>\n<p><span style=\"font-weight: 400;\">We are a group of students that want to share the skills we receive through our web development education. Together we are stronger!</span></p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ]
            },
            {
              "grid": 4,
              "allowAll": true,
              "hasConfig": false,
              "controls": [
                {
                  "value": "<h3>Skills</h3>\n<p><span style=\"font-weight: 400;\">Our skills is centered around the web development education and it's topics at 1. semester: Interface design, frontend design, backend programming and databases.</span></p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ]
            }
          ],
          "hasConfig": false,
          "id": "3166e797-5629-f0af-7726-dc8b7a890fd9"
        }
      ]
    }
  ]
}]]></grid>
    </textPage>
  </home>
</root>